apply plugin: 'shot'

ext {
    localProp = new Properties()
    fileName = 'local.properties'
    if (project.rootProject.file(fileName).exists()) {
        localProp.load(new FileInputStream(rootProject.file(fileName)))
    }
    screenShotsRecordedBaseDir =
            System.env.VDTESTING_DOWNLOADED_FILES_DIR != null ?
                    "${System.env.VDTESTING_DOWNLOADED_FILES_DIR}" :
                    getArgument("screenShotsRecordedBaseDir", "${project.buildDir}/reports/shot/verification/images")
    screenShotsVerificationBaseDir =
            System.env.SCREENSHOTS_VERIFICATION_BASE_DIR != null ?
                    System.env.SCREENSHOTS_VERIFICATION_BASE_DIR :
                    getArgument("screenShotsVerificationBaseDir", "${projectDir}/screenshots/debug/screenshots-default")
}

shot {
    tolerance = 0.05
    runInstrumentation = Boolean.valueOf(getArgument("runInstrumentation", "true"))
    showOnlyFailingTestsInReports = true
}

project.afterEvaluate {

    task copyVerificationFiles() {
        doFirst {
            println("screenShotsRecordedBaseDir=${screenShotsRecordedBaseDir}")
            println("screenShotsVerificationBaseDir=${screenShotsVerificationBaseDir}")
        }

//        fileTree(dir: "${screenShotsRecordedBaseDir}")
//                .filter { f ->
//                    println("&&&&&&&&&&&")
//                    println(f.name)
//                    !f.name.contains("diff_")
//                }.each { foundFile ->
////            def nameWithoutPrefix = foundFile.name.split("_screenshots-default_")[1]
////            println(foundFile.name)
//            copy {
//                from "${foundFile.path}"
//                into "${screenShotsVerificationBaseDir}"
////                rename { String fileName ->
////                    fileName.replace(foundFile.name, nameWithoutPrefix)
////                }
//            }
//        }
    }

    task unzipBundle(type: Copy) {

        def zipFile = file("${screenShotsVerificationBaseDir}/screenshot_bundle.zip")
        def outputDir = file(screenShotsVerificationBaseDir)

        from zipTree(zipFile)
        into outputDir
    }
}

private def getArgument(prop, defaultValue) {
    def r = project.hasProperty(prop) ? project.getProperties().get(prop) : defaultValue
    println("${prop}=${r}")
    return r
}

