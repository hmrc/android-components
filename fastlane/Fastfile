# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'semantic'

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Runs all checks"
  lane :check do
    gradle(task: "check")
  end

  desc "Takes a release tag and updates changelog"
  lane :tag_release do

    UI.user_error!("You need to provide a Github Personal token via a `GITHUB_TOKEN` environment variable - you can create a new token on Github https://github.com/settings/tokens/new") unless !ENV["GITHUB_TOKEN"].nil?

    # ensure repo is clean and on master
    ensure_git_status_clean
    ensure_git_branch

    # pull latest changes and fetch tags
    git_pull

    # get current version
    current_tag = last_git_tag
    version = Semantic::Version.new(current_tag)

    # prompt for bump type
    bump_type = UI.select(
      "Current version is #{current_tag}. What would you like to bump?",
      ["major", "minor", "patch"]
    )

    # increment version
    case bump_type
    when "major"
      tag = version.increment!(:major)
    when "minor"
      tag = version.increment!(:minor)
    else
      tag = version.increment!(:patch)
    end


    sh("git", "checkout", "-b", "tag/#{tag.to_string}")

    # update changelog
    stamp_changelog(section_identifier: tag.to_string)
    git_commit(path: "./CHANGELOG.md", message: "Update CHANGELOG.md and tagging release")

    push_to_git_remote

    sh("gh", "pr", "create", "--title", "Release #{tag.to_string}", "--body", "")

    # take tag and push to remote
    add_git_tag(tag: tag.to_string)
    push_git_tags

    # update releases on Github
    changelog = read_changelog(
      section_identifier: "[#{tag}]",
      excluded_markdown_elements: []
    )
    set_github_release(
      repository_name: "hmrc/android-components",
      api_token: ENV["GITHUB_TOKEN"],
      name: tag.to_string,
      tag_name: tag.to_string,
      description: changelog
    )
  end


  desc "Publishes components library"
  lane :publish do
    ensure_git_status_clean

    check

    # build the app and upload to Bintray
    gradle(task: 'components:clean')
    gradle(task: 'components:build')
    gradle(task: 'components:bintrayUpload')
  end

  desc "Publishes components test library"
  lane :publish_test do
    # ensure repo is clean and on master
    ensure_git_status_clean
    ensure_git_branch

    check

    # build the app and upload to Bintray
    gradle(task: 'components-test:clean')
    gradle(task: 'components-test:build')
    gradle(task: 'components-test:bintrayUpload')
  end

  desc "Starts an emulator and records new screenshots"
  lane :screenshot_record do
    automated_test_emulator_run(
      AVD_setup_path: "fastlane/avd_setup/Nexus6P.json",
      shell_task: "./gradlew clean executeScreenshotTests -Precord"
    )
  end

  desc "Starts an emulator and runs all device checks"
  lane :connectedCheck do
    automated_test_emulator_run(
      AVD_setup_path: "fastlane/avd_setup/Nexus6P.json",
      shell_task: "./gradlew clean executeScreenshotTests"
    )
  end

  desc "Runs the screenshot comparison"
  lane :screenshot_diff do |options|
    gradle(task: "copyVerificationFiles")
    gradle(task: "unzipBundle")
    gradle(task: "executeScreenshotTests", properties: {"runInstrumentation" => "false"})
  end
end
